(()=>{var t={724:()=>{const t=function(){const t=(t,r)=>t+r,r=t=>t*t;function e(r){return r.reduce(t)/r.length}return{mean:e,stddev:function(s){let n=e(s);return Math.sqrt(s.map(t=>r(t-n)).map(r).reduce(t)/(s.length-1))}}}();t.mean([1,3,5,7,9]),t.stddev([1,3,5,7,9])},800:()=>{class t{has(t){throw new Error("Abstract method")}}class r extends t{get size(){throw new Error("Abstract method")}[Symbol.iterator](){throw new Error("Abstract method")}isEmpty(){return 0===this.size}toString(){return`{${Array.from(this).join(", ")}}`}equals(t){if(!(t instanceof r))return!1;if(this.size!==t.size)return!1;for(let r of this)if(!t.has(r))return!1;return!0}}Symbol.iterator;class e extends r{insert(t){throw new Error("Abstract method")}remove(t){throw new Error("Abstract method")}add(t){for(let r of t)this.insert(r)}}class s extends e{constructor(t){super(),this.max=t,this.n=0,this.numBytes=Math.floor(t/8)+1,this.data=new Uint8Array(this.numBytes)}_valid(t){return Number.isInteger(t)&&t>=0&&t<=this.max}_has(t,r){return 0!==(this.data[t]&s.bits[r])}has(t){if(this._valid(t)){let r=Math.floor(t/8),e=t%8;return this._has(r,e)}return!1}Insert(t){if(!this._valid(t))throw new Error("Invalid set element: "+t);{let r=Math.floor(t/8),e=t%8;this._has(r,e)||(this.data[r]|=s.bits[e],this.n++)}}get size(){return this.n}*[Symbol.iterator](){for(let t=0;t<=this.max;t++)this.has(t)&&(yield t)}}s.bits=new Uint8Array([1,2,4,8,16,32,64,128]),s.masks=new Uint8Array([-2,-3,-5,-9,-17,-33,-65,-129])}},r={};function e(s){var n=r[s];if(void 0!==n)return n.exports;var i=r[s]={exports:{}};return t[s](i,i.exports,e),i.exports}const s=e(724);e(800).Bitset;let n=new BitSet(100);n.insert(10),n.insert(20),n.insert(30),s.mean([...n])})();